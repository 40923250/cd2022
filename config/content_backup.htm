<h1>About</h1>
<p>機械設計工程系大二協同產品設計實習課程.</p>
<p>課程網頁: <a href="https://mde.tw/cd2022">https://mde.tw/cd2022</a></p>
<p>課程倉儲: <a href="https://github.com/mdecourse/cd2022">https://github.com/mdecourse/cd2022</a></p>
<p>課程規劃與作業: <a href="https://github.com/mdecourse/cd2022/discussions">https://github.com/mdecourse/cd2022/discussions</a></p>
<p>課程討論區: <a href="https://gitter.im/mdecourse/cd2022">https://gitter.im/mdecourse/cd2022</a></p>
<p>課程導引: <a href="https://mde.tw/cd2022_guide">https://mde.tw/cd2022_guide</a></p>
<p><a href="http://[2001:288:6004:17:10ff::10]:88">教學影片</a> (for local area network only)</p>
<hr/>
<h4>課程簡介:</h4>
<p style="padding-left: 30px;">協同產品設計實習承接電腦輔助設計實習課程, 著重在探討多人模式下, 如何有效執行與機電系統設計相關的產品開發流程 (人與人協同, 人與機器協同, 機器與機器協同).</p>
<p style="padding-left: 30px;"><a href="/downloads/Man_and_Machine_in_Industry_4_0_Sep_2015.pdf">Man_and_Machine_in_Industry_4_0_Sep_2015.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Welcome to Industry 5.0.pdf">Welcome to Industry 5.0.pdf</a> (<a href="https://www.ctimes.com.tw/DispArt/tw/%E5%B7%A5%E6%A5%AD5.0/%E5%8D%94%E4%BD%9C%E5%9E%8B%E6%A9%9F%E5%99%A8%E4%BA%BA/%E4%BA%BA%E6%A9%9F%E5%8D%94%E4%BD%9C/%E6%A9%9F%E5%99%A8%E4%BA%BA/%E8%81%AF%E7%B6%B2/18081710397Z.shtml">中文翻譯</a>)</p>
<p style="padding-left: 30px;"><span class="text-node"><a href="/downloads/Industry 5.0.pdf">Industry 5.0.pdf</a></span></p>
<p style="padding-left: 30px;"><span class="text-node"><a href="/downloads/COBOT.pdf">COBOT.pdf</a></span></p>
<p style="padding-left: 30px;"><a href="/downloads/How Industry 5.0 Might Deliver Human-Centric Work Cultures.pdf">How Industry 5.0 Might Deliver Human-Centric Work Cultures.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/What will Industry 5.0 mean for manufacturing.pdf">What will Industry 5.0 mean for manufacturing.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Industry 5.0 A Transformative Vision for Europe.pdf">Industry 5.0 A Transformative Vision for Europe.pdf</a></p>
<p style="padding-left: 30px;">電腦輔助設計室 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH</a>, git submodule add URL dir, git clone recurse-submodules URL, git remote add abbr URL, cms.bat and acp.bat</p>
<p style="padding-left: 30px;"><a href="https://wcm.cycu.org">https://wcm.cycu.org</a> (BIOS 版本: Acer R01-A4, 2009.03/:10ff::12/pj2022)</p>
<p style="padding-left: 30px;">本課程以每四人為一小組, 兩小組為一大組執行機電系統模型設置專案, 任務一將延續 <a href="https://mde.tw/cad2021">cad2021</a> (<a href="https://mde.tw/cad2021_hw">Hw</a>, <a href="https://mde.tw/cad2021_final">Final</a>) 中的 meArm Robot 架構 (同 <a href="https://www.ufactory.cc/pages/uarm">uarm</a>, <a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">Onshape uarm</a> 與 <a href="https://github.com/AliShug/EvoArm">Evoarm</a>) 完成<a href="https://github.com/mdecourse/cd2022/discussions/1#discussioncomment-1984898">課程主題一</a>.</p>
<p style="padding-left: 60px;">(1) <a href="https://github.com/mdecourse/cd2022/discussions/11">整理 meArm 零組件檔案</a></p>
<p style="padding-left: 60px;">(2) <a href="https://github.com/mdecourse/cd2022/discussions/12">meArm pick and place 模擬</a></p>
<p style="padding-left: 60px;">(3) <a href="https://github.com/mdecourse/cd2022/discussions/13">Python remote API 模擬</a> (CoppeliaSim <a href="https://drive.google.com/file/d/1ZkKa4rl0fsmqsMWegPWjSVUW__9PQ3yh/view?usp=sharing">4.1.0</a>, <a href="https://drive.google.com/file/d/16tiFBeeV3OEwomioM9MQxQIUJwEyzcQy/view?usp=sharing">4.2.0</a>), 直接以 Python script 操控 (<a href="https://drive.google.com/file/d/1Y5XScY8-xkc1XQVOn3RsEJ8ds-byfS3s/view?usp=sharing">4.3.0</a>)</p>
<p style="padding-left: 30px;">課程主題二: 分別利用 <a href="https://mde.tw/cad2021/content/Compile%20Solvespace.html">Solvespace</a>, <a href="https://mde.tw/cad2021_hw/content/NX1980.html">NX1980</a> 與 <a href="https://www.onshape.com/en/">Onshape</a>, 參考<a href="/downloads/Not_so_new_type_of_walking_machine.pdf">行走機構文獻</a>, 設計一款可配合 meArm Robot 上下載運物件 (loading and unloading) 的行走機構.</p>
<p style="padding-left: 30px;">課程主題三: 每一大組必須將 Github 上的大組倉儲與網站內容, 設法同步至電腦輔助設計室 <a href="http://project.mde.tw/blog/yen-dian-nao-fu-zhu-she-ji-shi-dian-nao-pei-zhi.html">Skylake MD790</a> 電腦第三磁區中的 <a href="https://fossil-scm.org/home/doc/trunk/www/server/">Fossil SCM server</a>.</p>
<h4 style="padding-left: 30px;">References:</h4>
<p style="padding-left: 60px;"><a href="/downloads/What is Model-Based Design MBD How it Works.pdf">What is Model-Based Design MBD How it Works.pdf</a></p>
<p style="padding-left: 60px;">Model-based design (MBD) is the practice (實踐) of leveraging (利用) simulation to understand the behavior of a to-be-constructed or existing physical system (實體系統). Models are software representations of any components of the physical system under study and may span a range of energy-conserved disciplines such as electrical, mechanical, thermal, hydraulic, pneumatic, optical, or any combination of these. This implies the system may consist of electronic integrated circuits (ICs), as well as passive and active devices.</p>
<p style="padding-left: 60px;"><a href="/downloads/Model Based Enterprise MBE - Design for Manufacturing.pdf">Model Based Enterprise MBE - Design for Manufacturing.pdf</a></p>
<p style="padding-left: 60px;">In the growing global competition, an organization is constantly under pressure to produce high-quality products at an affordable price within the limited time frame. Day by day, organizations are providing more attention to improve design &amp; manufacturing processes. A collaborative design approach is making inroads (進展), in which information is always up-to-date and can be accessed as a "single source" for design and manufacturing teams. The industry trend is changing, product design approach is improving, organizations are providing more focus to minimize the gap between design &amp; manufacturing teams. Model-Based Enterprise (MBE) initiatives (倡議) are gaining more &amp; more traction, detailed PMI (Product Manufacturing Information) based 3D CAD modeling is replacing 2D drawings.</p>
<p style="padding-left: 60px;"><a href="/downloads/MBD Model-Based Definition 2021 Edition.pdf">MBD Model-Based Definition 2021 Edition.pdf</a></p>
<p style="padding-left: 60px;">MBD is the process of using an annotated (註記) 3D CAD model that includes semantic PMI (product manufacturing information a.k.a. manufacturing data for building &amp; measuring) to be the definitive authority downstream throughout the product lifecycle. It is a unifying aspect for design, manufacturing, quality, and other disciplines to move away from traditional 2D drawing-based workflows to a 3D CAD model-based workflow with geometry, manufacturing data, and other data all contained in one digital file- a.k.a. the "single source of truth."</p>
<p style="padding-left: 60px;"><a href="/downloads/QIF Quality Information Framework 2021 Definitive Guide.pdf">QIF Quality Information Framework 2021 Definitive Guide.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Best STEP File to Use AP203 AP214 and AP242.pdf">Best STEP File to Use AP203 AP214 and AP242.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/hardwick_technology_for_the_digital_thread.pdf">hardwick_technology_for_the_digital_thread.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/A New Quality Standard You Need to Know About.pdf">A New Quality Standard You Need to Know About.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/QIF簡介.pdf">QIF簡介.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/End-to-End Quality Information Framework (QIF) Technology Survey.pdf">End-to-End Quality Information Framework (QIF) Technology Survey.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/The Future of Factories Different Trends.pdf">The Future of Factories Different Trends.pdf</a></p>
<p style="padding-left: 60px;">The technological advancements promote the rise of the fourth industrial revolution,<br/>where key terms are efficiency, innovation, and enterprises' digitalization. The digitalization of a factory is deeply impacted by the new trends emerging under the umbrella of programs developed in the on-going fourth industrial revolution, which aims to automatize traditional manufacturing process and systems, taking benefits from the modern technologies developed by the ICT (Information and Communications Technology).</p>
<p style="padding-left: 60px;">Industry 4.0 and China 2025 programs share the goal of realizing the next Factory of the Future towards the development of an ICT-enabled intelligent manufacturing. In these two programs, the link between industrial machines, humans, and manufacturing systems is achieved by forming virtual collaborative networks to quickly respond to the market changes supported by Cyber-Physical Systems (CPS) as the system’s backbone.</p>
<h4 style="padding-left: 30px;">建模與模擬 (Modeling and Simulation):</h4>
<p style="padding-left: 30px;">現代產品幾乎都是植基於數位工程 (Digital Engineering) 下的產物, 意即都是先經過建模 (Modeling) 並透過模擬 (Simulation) 確認其模型功能符合需求後, 才逐一實體化 (Realization).</p>
<p style="padding-left: 30px;">建立模型的過程是希望利用數位方法來表達物體的真實情境, 當數位模型導入各種狀態變數 (State Variables), 在特定時間內的表現即為模擬 (Simulation), 若此模型的模擬結果越接近真實, 則此一模型即可稱為真實世界的 <a href="https://en.wikipedia.org/wiki/Digital_twin">digital twin</a>.</p>
<p style="padding-left: 30px;">數位模型建立過程可以透過網路無遠弗屆傳遞, 可以同步或非同步協同 (Synchronous or Asynchronous Collaboration) , 也可以虛實整合 (cyber-physical integration).</p>
<p style="padding-left: 30px;">數位模型的模擬即透過運算呈現結果, 其目標在令其貼近所代表的真實情境. 由於真實世界的部分情境可用數學模型簡化後加以呈現, 意即數位模型希望貼近真實世界, 產品設計者必須運用已知或創新方法建立適用的數位運算模型 (Digital Computation Model).</p>
<p style="padding-left: 30px;">電腦輔助設計 (Computer Aided Design) 的目的在利用電腦呈現建立模型過程 (Model Creation Process) 的全貌 (Whole Picture).</p>
<p style="padding-left: 30px;">協同產品設計 (Collaborative Product Design) 即採多人協同模式執行電腦輔助設計.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Q4VGQPk2Dl8" title="YouTube video player" width="560"></iframe></p>
<p>在全球老牌汽車大廠環伺下, Tesla 如何逐步邁向成功?</p>
<p>How can a tiny company with very few resource (擁有極少資源的小公司）, actually makes a difference (有所作為).</p>
<p>Roadster - high price and low volume (少量高價): it shows the world you can make a great electric car (有能力造出非常出色的電動車）.</p>
<p>若將 Tesla 換成現在的你......(該不是說如何在二線團隊中創造出一流成果或是輾轉進入一線團隊中?)</p>
<p><a href="/downloads/tesla.com-UX Designer Energy Consumer Tesla 工作機會.pdf">tesla.com-UX Designer Energy Consumer Tesla 工作機會.pdf</a></p>
<p><a href="/downloads/tesla.com-Analysis and Modeling Design Engineer High Voltage Devices Tesla 工作機會.pdf">tesla.com-Analysis and Modeling Design Engineer High Voltage Devices Tesla 工作機會.pdf</a></p>
<p><a href="/downloads/tesla.com-Sr Manufacturing Engineer BIW Tesla 工作機會.pdf">tesla.com-Sr Manufacturing Engineer BIW Tesla 工作機會.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/a_T4QayqtI4" title="YouTube video player" width="560"></iframe></p>
<p>Self-teaching era (自學世代) - 這個世代的菁英可能不是「教」得出來的.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/lSD_vpfikbE" title="YouTube video player" width="560"></iframe></p>
<p>Tesla as the world's biggest robot company. (世界最大的機器人公司)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/I9D4ifGzndY" title="YouTube video player" width="560"></iframe></p>
<p>SpaceX 前三次試飛全部失敗收場, 準備第四次試飛時, 公司已經沒有足夠經費製作第五支火箭, 結果......</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ycPr5-27vSI" title="YouTube video player" width="560"></iframe></p>
<p>聽聽看他們在聊什麼?</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/RcYjXbSJBN8" title="YouTube video player" width="560"></iframe></p>
<p>聽聽看他們在聊什麼?</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Business Model Design Lessons Learned from Tesla Motors.pdf">Business Model Design Lessons Learned from Tesla Motors.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Three Lessons Learned from Teslas Success.pdf">Three Lessons Learned from Teslas Success.pdf</a></p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>Realizable</h2>
<p>本課程以 4 人一小組, 兩小組成一大組的方式, 透過計算機程式方法 (執行運算及操控) 與電腦輔助設計的建模流程, 完成可實現之機電整合系統設計 (Realizable Mechatronic System Design).</p>
<p><a href="/downloads/design_of_mechatronic_system.pdf">Design of Mechatronic System.pdf</a></p>
<p><a href="https://github.com/mdecourse/ackermann-line-follower-robot">https://github.com/mdecourse/ackermann-line-follower-robot</a></p>
<p><a href="https://github.com/mdecourse/CoppeliaSim-Remote-API">https://github.com/mdecourse/CoppeliaSim-Remote-API</a></p>
<p><a href="https://sstepput.medium.com/teach-your-robot-new-tricks-with-nlp-and-deep-learning-301c9a1f1c0c">https://sstepput.medium.com/teach-your-robot-new-tricks-with-nlp-and-deep-learning-301c9a1f1c0c</a></p>
<p>機械元件建模工具:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2021/content/Compile%20Solvespace.html">Solvespace</a> (開源)、<a href="https://mde.tw/cad2021_hw/content/NX1980.html">NX1980</a> (高端)、<a href="https://www.onshape.com/en/">Onshape</a> (全雲端)</p>
<p>電子電機控制與感測模擬工具:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3462-4">Beginning Robotics with Raspberry Pi and Arduino</a> (在校園網路下載)</p>
<p style="padding-left: 30px;">Wokwi (web-based):</p>
<p style="padding-left: 60px;"><a href="https://wokwi.com/">https://wokwi.com/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/wokwi">https://github.com/wokwi</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/wokwi">https://github.com/wokwi</a></p>
<p style="padding-left: 60px;"><a href="https://wokwi.com/arduino/libraries/Servo/Sweep">Servo motor 控制</a></p>
<p style="padding-left: 30px;"><a href="https://www.sites.google.com/site/unoardusim/services">Unoardusim</a> (單機)</p>
<p style="padding-left: 30px;"><a href="https://lcgamboa.github.io/">PICSimLab</a> (開源)</p>
<p>3D 列印與模擬工具:</p>
<p style="padding-left: 30px;">3D printers:</p>
<p style="padding-left: 60px;"><a href="/downloads/Recent Developments and Challenges of 3D-Printed Construction- A Review of Research Fronts.pdf">Recent Developments and Challenges of 3D-Printed Construction: A Review of Research Fronts.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/kll3pp">https://github.com/mdecourse/kll3pp</a> (<a href="/downloads/kll3pp_printer.ttt">kll3pp_printer.ttt</a>, <a href="https://www.youtube.com/watch?v=R26R_07rkIc">Delta printer</a>)</p>
<p style="padding-left: 30px;">G-code based 列印模擬:</p>
<p style="padding-left: 60px;"><a href="https://github.com/sudipchakraborty/A-simulated-3D-Printer-In-CoppeliaSim">https://github.com/sudipchakraborty/A-simulated-3D-Printer-In-CoppeliaSim</a> (<a href="https://zenodo.org/record/5897079">Paper</a>)</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/gsim">https://github.com/mdecourse/gsim</a> (執行需要 PyGObject, <a href="https://mde.tw/wcm2022/content/Project5.html">參考</a>)</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/FIBR3DEmul">https://github.com/mdecourse/FIBR3DEmul</a> (CoppeliaSim plugin in Cpp, <a href="/downloads/FIBR3DEmul—an open-access simulation solution for 3D printing processes of FDM machines with 3 plus actuated axes.pdf">paper)</a></p>
<p style="padding-left: 60px;">G-code processing:</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/gcode_machine">https://github.com/mdecourse/gcode_machine</a></p>
<p style="padding-left: 30px;">3D Printer based 列印模擬:</p>
<p style="padding-left: 60px;"><a href="https://all3dp.com/2/gcode-viewer-3d-printer-simulator-best-tools/">https://all3dp.com/2/gcode-viewer-3d-printer-simulator-best-tools/</a></p>
<p style="padding-left: 30px;"><a href="https://www.hubs.com/knowledge-base/simulations-3d-printing/">進階商用 3D 列印模擬</a></p>
<p>雷射切割模擬工具:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/papercraft">https://github.com/mdecourse/papercraft</a>  (Unfold STL for laser cutting)</p><h2>Website</h2>
<p>倉儲 (Repository) and 網站 (Website)</p>
<p>使用分散式版次管理系統中的倉儲建立協同設計網站的特性:</p>
<ol>
<li>可清楚記錄每一位成員對於協同設計流程的貢獻細節.</li>
<li>網頁中納入 <a href="http://mde.tw/eng/content/Development.html">Disqus</a>, 可提升各頁面的互動性.</li>
<li>利用 Github, Gitlab, Bitbucket 與 Fossil SCM 同步協同設計倉儲內容, 可提升數位資料保全.</li>
<li>可回朔設計流程中的任一版本, 並呈現改版說明註記, 讓新成員自行研究探索.</li>
</ol>
<p>每一成員均以 SSH 推送版本至各小組與各大組倉儲, 也可以採用<a href="https://github.com/mdecourse/cad2021_final/tree/main/downloads">程式方法</a>集結成員改版內容.</p>
<h4>SSH push 基本概念:</h4>
<p>以 git 作為帳號, 利用 secure shell 指令登入 github.com, 一旦近端的 private key 與 github.com 網站上使用者事先存放的 public key 屬於同一對, 則取得將近端版本推向 github.com 伺服器的權限, 對倉儲內容進行改版.</p>
<p>在近端若使用 Windows 操作系統, 可以採用 Putty 當作執行 secure shell 指令的工具, 但必須在啟動可攜系統時, 便透過 git 指令內建的系統環境變數 GIT_SSH 設為 plink.exe 所在路徑. 之後 git 就可透過 putty 以 secure shell 的方式推送版本.</p>
<p>而利用 putty 推送版本的過程需要網路連線與近端 private key 的所在路徑. 網路連線若在近端使用 IPv6 則必須額外設計能支援  IPv6 串接到 IPv4 網路協定的代理主機 (因為截至目前 github.com 只支援 IPv4 網路協定). 至於近端的 private key 必須是 putty 能讀取的格式, 而放到 github.com 上的 public key 則必須是 github.com 認可的 OpenSSH 格式.</p><h2>Brython</h2>
<p><a href="https://github.com/orgs/siemens/repositories?q=&amp;type=all&amp;language=python">Siemens and Python related repositories</a></p>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame --></p>
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<p><!-- Cango 程式庫 --></p>
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- for Konva 程式庫 --></p>
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<p><!-- graphics-column is for ggame --></p>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
</script>
</p><h2>Rust</h2>
<p><a href="https://rust-lang.tw/book-tw/title-page.html">https://rust-lang.tw/book-tw/title-page.html</a> (<a href="https://doc.rust-lang.org/book/">英文版</a>)</p>
<p><a href="http://mde.tw/wcm2022/content/Rust.html">http://mde.tw/wcm2022/content/Rust.html</a></p>
<p><a href="https://users.rust-lang.org/t/rust-for-plc-programming/27331/6">https://users.rust-lang.org/t/rust-for-plc-programming/27331/6</a></p>
<p><a href="https://replit.com/">https://replit.com/</a> </p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/MsocPEZBd-M" title="YouTube video player" width="560"></iframe></p><h1>NX1980</h1>
<h4>Why NX1980?</h4>
<p>為什麼採用 NX1980?</p>
<p>優點:</p>
<ol>
<li>NX1980 可以直接放入 USB 隨身碟 (全模組總容量約 30 GB), 透過 IPv6 網路連線取得教育版授權後啟動.</li>
<li>NX1980 可啟用的模組包含永久授權的 <a href="/downloads/nx_acd10_acd11.txt">ACD10 與 ACD11</a> 完整教育版 CAD/E/M 功能.</li>
<li>NX1980 的二次開發可以直接採用 Python 程式語言, 在 Generative Design 與 Data Science 整合領域上的發展潛力無窮.</li>
</ol>
<p>缺點:</p>
<ol>
<li>採用 NX1980 後所建立的零組件檔案, 只能使用 1980 版之後的 NX 套件開啟, 無法以先前的 NX3, NX12 或 NX1782 版本開啟.</li>
<li>NX1980 套件模組與功能眾多, 完整的官方參考資料需要在維護合約內才能擷取, 造成初學者學習上的重大瓶頸.</li>
</ol>
<p>本課程所使用的 <a href="https://drive.google.com/file/d/17wDJd6AeMhwrOzWGO_o8afCEsFKh3Hy9/view">NX1980 portable</a> (for @gm users only, file size: 3 GB, extracted size: 15.2 GB).</p>
<p><a href="https://mde.tw/cad2021_hw/content/NX1980.html">https://mde.tw/cad2021_hw/content/NX1980.html</a></p>
<p><a href="https://docs.sw.siemens.com/zh-TW/release/209349590/NX%201980%20Series">中文 Documentation</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%201980%20Series">英文 Documentation</a></p>
<p><a href="https://mde.tw/cad2021_hw/content/CAD2%20%E7%B9%AA%E5%9C%96.html">有關 NX</a></p>
<p><a href="https://mde.tw/cad2019/downloads/NX-12-for-Engineering-Design.pdf">https://mde.tw/cad2019/downloads/NX-12-for-Engineering-Design.pdf</a></p>
<p><a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl">NX1855-1919 Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=GV7dIG-Xo4I&amp;list=PLWgKU50q-gC3sTbME7-xNFPQQL8o4mdC0&amp;index=1">NX Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=q1_9ZG0ypx4&amp;list=PL0u_ma41CXfSeMZ669ttDWMFLTJ522K4c">NX Tutorial 2</a></p>
<p><a href="https://web.mst.edu/~mleu/nx_manuals/">NX Tutorial 3</a></p>
<p>In German:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9zjjE6nW0d8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/V5Fi447E9fg" title="YouTube video player" width="560"></iframe></p>
<p>In English:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/A-DSNMz6TVk" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/hCvy5i5r6lo" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/TllV3hE7QPw" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/fYHl4Fkhx1I" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/tRTS2WkNxmo" title="YouTube video player" width="560"></iframe></p>
<p>Pattern:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JqQLHVfWk_Y" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IBfm8li9f1c" title="YouTube video player" width="560"></iframe></p>
<p>In Turkish:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/c2rZPjqnVaU" title="YouTube video player" width="560"></iframe></p>
<p>適合關掉聲音觀看:</p>
<p>Modeling:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dxV5454sOWw" title="YouTube video player" width="560"></iframe></p>
<p>Move Face:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/mgGwNmckfg0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zjPQcJF94-E" title="YouTube video player" width="560"></iframe></p><h2>Automation</h2>
<p><a href="https://new.siemens.com/global/en/products/automation/pc-based/iot-gateways/iot2000.html">https://new.siemens.com/global/en/products/automation/pc-based/iot-gateways/iot2000.html</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/y8bJk_hGYD4" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/wd1Y5m5RzRE" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VaInahiU1Z8" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ik8LmC2HWfk" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ERItSiC7uMs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/J1k9GTmYwkc" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://github.com/gaphor/gaphor">https://github.com/gaphor/gaphor</a></p>
<p><a href="https://gaphor.org/download.html">https://gaphor.org/download.html</a></p>
<p><a href="https://sysml.org/.res/docs/specs/OMGSysML-v1.6-19-11-01.pdf">https://sysml.org/.res/docs/specs/OMGSysML-v1.6-19-11-01.pdf</a></p>
<p><a href="https://github.com/gaphor/gaphor">https://github.com/gaphor/gaphor</a></p>
<p><a href="https://gaphor.org/download.html">https://gaphor.org/download.html</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Ko0NTS0IpfI" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://pygobject.readthedocs.io/en/latest/index.html">https://pygobject.readthedocs.io/en/latest/index.html</a></p><h1>Onshape</h1>
<p>Why Onshape?</p>
<p>為什麼採用 Onshape?</p>
<p>優點:</p>
<ol>
<li>只要電腦 GPU 顯示卡等級符合要求, 可以直接以瀏覽器開啟, 使用最新版本, 近端電腦無需任何額外套件安裝.</li>
<li>多人可以直接在線上協同零組件繪圖, 所完成的零組件可以直接透過 URL 分享.</li>
<li>設計繪圖流程具備版次管理, 使用者可以像使用 git 的版次管理系統進行零組件特徵管理.</li>
<li>所有檔案全部採雲端儲存, 使用者繪圖過程無需存檔.</li>
<li>提供 Featurescript, 使用者可以透過類似 Typescript (Javascript) 程式語言的方式建立客製化參數特徵.</li>
</ol>
<p>缺點:</p>
<ol>
<li>沒有網路就無法進行設計繪圖</li>
<li>對一般用戶只提供特徵層級的二次開發, 更進階的零組件或延伸開發, 只提供給特定商務用戶.</li>
</ol>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/kPNlzlkBGMA" title="YouTube video player" width="560"></iframe></p><h1>MBSE</h1>
<p>Model Based System Engineering</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VaInahiU1Z8" title="YouTube video player" width="560"></iframe></p>
<p>From Document-based to Model-based product design:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ik8LmC2HWfk" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ERItSiC7uMs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/J1k9GTmYwkc" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mde.tw/wcm2021/downloads/2020_Simulator%20for%20Articulate%20Robots.pdf">2020_Simulator_for_Articulate_Robots.pdf</a></p>
<p></p><h2>Project1</h2>
<h4>IK and Robot Calibration</h4>
<p>Convert <a href="https://github.com/mdecourse/kuka_iiwa_ik">https://github.com/mdecourse/kuka_iiwa_ik</a> to Python</p>
<p>Convert <a href="https://github.com/mdecourse/Kinematic-Calibration">https://github.com/mdecourse/Kinematic-Calibration</a> to Python</p>
<p><a href="/downloads/CGA in Practice 1.pdf">CGA in Practice 1.pdf</a></p>
<p><a href="/downloads/Classical_geometrical_approach_to_circle_fitting.pdf">Classical_geometrical_approach_to_circle_fitting.pdf</a></p>
<p><a href="/downloads/Identification of Denavit-Hartenberg Parameters of an Industrial Robot.pdf">Identification of Denavit-Hartenberg Parameters of an Industrial Robot.pdf</a></p>
<p><a href="/downloads/Geometric calibration of industrial robots using enhanced partial pose measurements and design of experiments.pdf">Geometric calibration of industrial robots using enhanced partial pose measurements and design of experiments.pdf</a></p>
<p><a href="/downloads/GEOMETRICAL APPROACH FOR INDUSTRIAL ROBOT AXIS CALIBRATION USING LASER TRACKER.pdf">GEOMETRICAL APPROACH FOR INDUSTRIAL ROBOT AXIS CALIBRATION USING LASER TRACKER.pdf</a></p>
<p><a href="/downloads/ROBOTIC TOOLING CALIBRATION BASED ON LINEAR AND NONLINEAR FORMULATIONS.pdf">ROBOTIC TOOLING CALIBRATION BASED ON LINEAR AND NONLINEAR FORMULATIONS.pdf</a></p>
<p><a href="/downloads/Automatic self-contained calibration of an industrial dual-arm robot with cameras using self-contact, planar constraints, and self-observation.pdf">Automatic self-contained calibration of an industrial dual-arm robot with cameras using self-contact, planar constraints, and self-observation.pdf</a></p><h2>Arduino</h2>
<p>Desktop simulator:</p>
<p style="padding-left: 30px;"><a href="https://www.sites.google.com/site/unoardusim/services">https://www.sites.google.com/site/unoardusim/services</a></p>
<p>Online Arduino simulator: </p>
<p style="padding-left: 30px;"><a href="https://wokwi.com/">https://wokwi.com/</a> </p>
<p style="padding-left: 60px;"><a href="https://github.com/orgs/wokwi/repositories">https://github.com/orgs/wokwi/repositories</a></p>
<h4>Picsimlab:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/lcgamboa/picsimlab">https://github.com/lcgamboa/picsimlab</a></p>
<p style="padding-left: 30px;"><a href="https://lcgamboa.github.io/">https://lcgamboa.github.io/</a></p>
<p><a href="https://mplabxpress.microchip.com/mplabcloud/ide">https://mplabxpress.microchip.com/mplabcloud/ide</a></p><h1>Programming</h1>
<p><a href="https://www.toptal.com/robotics/programming-a-robot-an-introductory-tutorial">https://www.toptal.com/robotics/programming-a-robot-an-introductory-tutorial</a></p>
<p><a href="https://github.com/mdecourse/sobot-rimulator">https://github.com/mdecourse/sobot-rimulator</a></p>
<p><a href="https://mde.tw/cp2021/content/Cython.html">https://mde.tw/cp2021/content/Cython.html</a></p>
<p><a href="http://mde.tw/cp2021/content/C.html">http://mde.tw/cp2021/content/C.html</a></p>
<p><a href="http://mde.tw/4072pj3/content/%E7%92%B0%E5%A2%83%E4%BF%AE%E6%AD%A3.html">Python 編譯環境修正</a></p>
<p><a href="http://mde.tw/cad2020/content/HW1_NX.html">Python 與 NXOpen Python API</a></p>
<p><a href="/downloads/2013_web_based_customized Design.pdf">web_based_customized Design.pdf</a></p>
<p>2022.07 之前放在 @gm 的 video 教學影片應該仍可執行 (之後將會配合 Google Drive 取消 unlimited storage 縮減容量而遭刪除).</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/W5Video.html">http://mde.tw/cad2020/content/W5Video.html</a></p><h1>Downloads</h1>
<p>綜合第一工程館八樓電腦輔助設計室純 IPv6 網路設定: <a href="https://mde.tw/wcm2022/content/Network.html">https://mde.tw/wcm2022/content/Network.html</a></p>
<h4>CoppeliaSim:</h4>
<p>CoppeliaSim Edu may ONLY be used by educational entities composed by following people and institutions:</p>
<p style="padding-left: 30px;">students, teachers and professors<br/>schools and universities</p>
<p>Educational entities do NOT include companies, research institutions, non-profit organisations, foundations, etc.</p>
<p>An educational entity may use CoppeliaSim Edu under following conditions:</p>
<p style="padding-left: 30px;">usage should be non-commercial</p>
<p>cd2022 downloads are provided by cd2022 At mde</p>
<p><a href="https://drive.google.com/file/d/1ZkKa4rl0fsmqsMWegPWjSVUW__9PQ3yh/view?usp=sharing">CoppeliaSim Edu 4.1.0 Portable</a> (official and self-compiled versions)</p>
<p><a href="https://drive.google.com/file/d/16tiFBeeV3OEwomioM9MQxQIUJwEyzcQy/view?usp=sharing">CoppeliaSim Edu 4.2.0 Portable</a> (official version)</p>
<p><a href="https://drive.google.com/file/d/1Y5XScY8-xkc1XQVOn3RsEJ8ds-byfS3s/view?usp=sharing">CoppeliaSim Edu 4.3.0 Portable</a> (<a href="https://www.coppeliarobotics.com/helpFiles/en/versionInfo.htm#coppeliaSim4.3.0">What's new</a>)</p>
<p style="padding-left: 30px;">內建 script 除了支援 Lua, 同時<a href="https://www.coppeliarobotics.com/helpFiles/en/luaPythonDifferences.htm">支援 Python</a> (<a href="https://www.coppeliarobotics.com/helpFiles/en/scripts.htm">Scripts in Lua and Python</a>), 但需在啟動前設定 system/usrset.txt 中的 defaultPython =  Y:/Python395/python.exe, 且安裝 <a href="https://pyzmq.readthedocs.io/en/latest/">pyzmq</a> 與 <a href="https://pypi.org/project/cbor/">cbor</a> 等模組.</p>
<p style="padding-left: 30px;">pip install pyzmq cbor</p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/apiFunctions.htm">regular api reference</a></p>
<hr/>
<h4>Fossil and Solvespace:</h4>
<p><a href="https://drive.google.com/file/d/1BVd92GyKWgom2b9Uvi84WujHQPSrdFbU/view?usp=sharing">fossil.exe and solvespace.exe</a> (self-compiled version)</p>
<hr/>
<h4>NX1980:</h4>
<p><a href="https://drive.google.com/file/d/17wDJd6AeMhwrOzWGO_o8afCEsFKh3Hy9/view">NX1980 portable</a> (for @gm users only, file size: 3 GB, extracted size: 15.2 GB)</p>
<hr/>
<h4>Compile CoppliaSim Portable System:</h4>
<p><a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (file size: 4 GB, extracted size: 14 GB)</p>
<p><a href="https://drive.google.com/file/d/16L08jH3ZtoMeeGWBJrP9DuIk-cby_Wqw/view?usp=sharing">compile_copsim_for_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB), 包含除了 NX1980 之外的所有課程相關可攜程式套件.</p>
<p>下載 <a href="https://drive.google.com/file/d/1Cq6J8hVS0JUBAu8Nkt2pfrCK5ua3OYnF/view?usp=sharing">PUTTY_0.74.7z</a> (下載 940 KB, 解開壓縮後 4 MB)</p>
<p>下載 <a href="https://drive.google.com/file/d/1Av_AlOG33lsXDCZnePooj6MGbItuq22p/view?usp=sharing">PUTTY_0.76.7z</a> (下載 1 MB, 解開壓縮後 4.36 MB)</p>
<p style="padding-left: 30px;">請注意!! 版本很重要, 使用 PUTTY 0.74 建立的 keys, 無法在 0.76 版中使用.</p>
<hr/>
<h4>Webots</h4>
<p><a href="https://cyberbotics.com/doc/guide/webots-license-agreement">Webots 使用授權</a>較 <a href="https://www.coppeliarobotics.com/helpFiles/en/licensing.htm">CoppeliaSim 使用授權</a>寬鬆.</p>
<p>Webots 對於全球資訊網的支援( <a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a>) 較 CoppeliaSim 佳 (CoppeliaSim 自 4.3.0 rev2 透過 <a href="https://github.com/CoppeliaRobotics/threejsFrontend">three.js</a>, <a href="https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm">支援瀏覽器前端展示</a>).</p>
<p>CoppeliaSim 執行時所需獨立顯卡的要求 (<a href="https://forum.coppeliarobotics.com/viewtopic.php?t=1707">requirements</a>) 較 Webots (<a href="https://cyberbotics.com/doc/guide/system-requirements">requirements</a>) 低.</p>
<p>下載 <a href="https://drive.google.com/file/d/1vJpjVIXqCNFR7EzjwdEFAfQ6Jsekz21T/view?usp=sharing">webots_2022a.7z</a> (file size: 315 MB, extracted size: 1.7 GB)</p>